wandb: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: tadimeti (tadimeti-stanford) to https://api.wandb.ai. Use `wandb login --relogin` to force relogin
wandb: Tracking run with wandb version 0.19.8
wandb: Run data is saved locally in /home/c-tadimeti/language-model-basics/wandb/run-20250422_101430-6y40dk3z
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run owt
wandb: ‚≠êÔ∏è View project at https://wandb.ai/tadimeti-stanford/transformer_lm
wandb: üöÄ View run at https://wandb.ai/tadimeti-stanford/transformer_lm/runs/6y40dk3z
  0%|          | 0/20000 [00:00<?, ?it/s]/home/c-tadimeti/language-model-basics/.venv/lib/python3.13/site-packages/torch/_inductor/compile_fx.py:194: UserWarning: TensorFloat32 tensor cores for float32 matrix multiplication available but not enabled. Consider setting `torch.set_float32_matmul_precision('high')` for better performance.
  warnings.warn(
  0%|          | 1/20000 [00:28<159:56:31, 28.79s/it]  0%|          | 2/20000 [00:47<126:37:03, 22.79s/it]  0%|          | 2/20000 [00:49<137:53:51, 24.82s/it]
Traceback (most recent call last):
  File "/home/c-tadimeti/language-model-basics/cs336_basics/train_lm.py", line 266, in <module>
    train_lm(cfg)
    ~~~~~~~~^^^^^
  File "/home/c-tadimeti/language-model-basics/cs336_basics/train_lm.py", line 178, in train_lm
    loss.backward()
    ~~~~~~~~~~~~~^^
  File "/home/c-tadimeti/language-model-basics/.venv/lib/python3.13/site-packages/torch/_tensor.py", line 626, in backward
    torch.autograd.backward(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        self, gradient, retain_graph, create_graph, inputs=inputs
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/home/c-tadimeti/language-model-basics/.venv/lib/python3.13/site-packages/torch/autograd/__init__.py", line 347, in backward
    _engine_run_backward(
    ~~~~~~~~~~~~~~~~~~~~^
        tensors,
        ^^^^^^^^
    ...<5 lines>...
        accumulate_grad=True,
        ^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/home/c-tadimeti/language-model-basics/.venv/lib/python3.13/site-packages/torch/autograd/graph.py", line 823, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        t_outputs, *args, **kwargs
        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    )  # Calls into the C++ engine to run the backward pass
    ^
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 7.81 GiB. GPU 0 has a total capacity of 79.19 GiB of which 7.75 GiB is free. Including non-PyTorch memory, this process has 71.43 GiB memory in use. Of the allocated memory 65.21 GiB is allocated by PyTorch, and 5.50 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
